import { z } from 'zod';
import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';
import { McpToolResult, McpTool } from '@modelcontextprotocol/sdk/server/index.js';
import { logger } from '../../utils/logger.js';

// Schema for UI builder parameters
const UIBuilderParamsSchema = z.object({
  uiType: z.enum(['Menu', 'HUD', 'Dialog', 'Inventory', 'Shop', 'Leaderboard', 'Settings', 'Loading', 'Custom'])
    .describe('Type of UI to generate'),
  elements: z.array(z.string()).min(1)
    .describe('UI elements to include (e.g., "Button", "TextLabel", "Frame", "ScrollingFrame", "ImageLabel")'),
  responsive: z.boolean().default(true)
    .describe('Whether the UI should be responsive to different screen sizes'),
  stylePreset: z.enum(['Modern', 'Retro', 'Minimalist', 'Fantasy', 'SciFi', 'Custom'])
    .default('Modern')
    .describe('Visual style preset to use'),
  layout: z.enum(['Grid', 'List', 'Flex', 'Absolute', 'Mixed'])
    .default('Grid')
    .describe('Layout system to use for positioning elements'),
  animations: z.boolean().default(true)
    .describe('Whether to include animations'),
  useRoactComponents: z.boolean().default(false)
    .describe('Whether to generate Roact component-based UI'),
  colorScheme: z.object({
    primary: z.string().optional(),
    secondary: z.string().optional(),
    background: z.string().optional(),
    text: z.string().optional(),
    accent: z.string().optional()
  }).optional()
    .describe('Custom color scheme (RGB values as strings, e.g., "255, 0, 0")')
});

// Type for UI builder parameters
type UIBuilderParams = z.infer<typeof UIBuilderParamsSchema>;

/**
 * Creates UI systems for Roblox games
 */
export const uiBuilder: McpTool<UIBuilderParams> = {
  name: 'create-ui-system',
  description: 'Generates Roblox UI code based on specified parameters',
  parameters: UIBuilderParamsSchema,
  
  execute: async (params: UIBuilderParams): Promise<McpToolResult> => {
    logger.info(`Creating UI system of type: ${params.uiType}`);
    
    try {
      // Generate the main script for the UI
      const mainScript = generateMainScript(params);
      
      // Generate style script
      const styleScript = generateStyleScript(params);
      
      // Generate controller script if needed
      const controllerScript = params.animations || params.responsive 
        ? generateControllerScript(params) 
        : null;
      
      // Generate usage instructions
      const usageInstructions = generateUsageInstructions(params);
      
      // Prepare result
      const result: McpToolResult = {
        content: {
          mainScript,
          styleScript,
          usageInstructions
        }
      };
      
      if (controllerScript) {
        result.content.controllerScript = controllerScript;
      }
      
      return result;
    } catch (error) {
      logger.error(`Error creating UI system: ${error}`);
      return {
        error: {
          message: 'Failed to create UI system',
          details: String(error)
        }
      };
    }
  },
  
  register: (server: McpServer) => {
    server.tools.add(uiBuilder);
    logger.info('UI Builder tool registered');
  }
};

/**
 * Generates the main UI script based on parameters
 */
function generateMainScript(params: UIBuilderParams): string {
  // Choose between Roact component script or traditional ScreenGui script
  if (params.useRoactComponents) {
    return generateRoactScript(params);
  } else {
    return generateTraditionalUIScript(params);
  }
}

/**
 * Generates a traditional ScreenGui-based UI script
 */
function generateTraditionalUIScript(params: UIBuilderParams): string {
  // Define UI hierarchy based on UI type
  const uiHierarchy = getUIHierarchy(params);
  
  return `--[[
  ${params.uiType} UI System
  Generated by Roblox Studio MCP Server
  
  Type: ${params.uiType}
  Style: ${params.stylePreset}
  Responsive: ${params.responsive ? 'Yes' : 'No'}
  Animations: ${params.animations ? 'Yes' : 'No'}
]]

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UIS = game:GetService("UserInputService")

-- Get the local player
local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- Import the style module
local StyleModule = require(ReplicatedStorage:WaitForChild("UI"):WaitForChild("StyleModule"))

${params.responsive || params.animations ? '-- Import the controller module\nlocal UIController = require(ReplicatedStorage:WaitForChild("UI"):WaitForChild("UIController"))' : ''}

-- Create the main ScreenGui
local ${params.uiType}UI = Instance.new("ScreenGui")
${params.uiType}UI.Name = "${params.uiType}UI"
${params.uiType}UI.ResetOnSpawn = false
${params.uiType}UI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
${params.uiType}UI.Parent = playerGui

-- Create the main container
local MainContainer = Instance.new("Frame")
MainContainer.Name = "MainContainer"
MainContainer.BackgroundColor3 = StyleModule.Colors.Background
MainContainer.BorderSizePixel = 0
${params.layout === 'Absolute' ? 
  'MainContainer.Position = UDim2.new(0.5, 0, 0.5, 0)\nMainContainer.AnchorPoint = Vector2.new(0.5, 0.5)' : 
  'MainContainer.Position = UDim2.new(0, 0, 0, 0)\nMainContainer.AnchorPoint = Vector2.new(0, 0)'}
${params.responsive ? 
  'MainContainer.Size = UDim2.new(0.8, 0, 0.8, 0)' : 
  'MainContainer.Size = UDim2.new(0, 600, 0, 400)'}
MainContainer.Parent = ${params.uiType}UI

${params.layout !== 'Absolute' ? generateLayoutCode(params.layout) : '-- Using absolute positioning'}

${uiHierarchy}

${params.animations ? generateAnimationsCode(params.uiType) : '-- Animations disabled'}

${params.responsive ? '-- Register for responsive updates\nUIController.RegisterUI(${params.uiType}UI, MainContainer)' : '-- Responsive design disabled'}

-- Function to toggle visibility
local function toggleVisibility()
  ${params.uiType}UI.Enabled = not ${params.uiType}UI.Enabled
  
  ${params.animations ? `if ${params.uiType}UI.Enabled then
    playOpenAnimation()
  end` : '-- No animations to play'}
end

-- Function to hide UI
local function hideUI()
  ${params.uiType}UI.Enabled = false
end

-- Function to show UI
local function showUI()
  ${params.uiType}UI.Enabled = true
  
  ${params.animations ? 'playOpenAnimation()' : '-- No animations to play'}
end

-- Return the interface
return {
  ScreenGui = ${params.uiType}UI,
  MainContainer = MainContainer,
  Toggle = toggleVisibility,
  Hide = hideUI,
  Show = showUI
}
`;
}

/**
 * Generates a Roact component-based UI script
 */
function generateRoactScript(params: UIBuilderParams): string {
  // Define Roact components based on UI type
  const roactComponents = getRoactComponents(params);
  
  return `--[[
  ${params.uiType} UI System (Roact Implementation)
  Generated by Roblox Studio MCP Server
  
  Type: ${params.uiType}
  Style: ${params.stylePreset}
  Responsive: ${params.responsive ? 'Yes' : 'No'}
  Animations: ${params.animations ? 'Yes' : 'No'}
]]

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")

-- Import Roact
local Roact = require(ReplicatedStorage:WaitForChild("Packages"):WaitForChild("Roact"))

-- Import the style module
local StyleModule = require(ReplicatedStorage:WaitForChild("UI"):WaitForChild("StyleModule"))

${params.responsive || params.animations ? '-- Import the controller module\nlocal UIController = require(ReplicatedStorage:WaitForChild("UI"):WaitForChild("UIController"))' : ''}

-- Get the local player
local player = Players.LocalPlayer

--[[ ${params.uiType} Component ]]--
local ${params.uiType} = Roact.Component:extend("${params.uiType}")

function ${params.uiType}:init()
  self.state = {
    visible = true${params.animations ? ',\n    animationProgress = 0' : ''}
  }
  
  ${params.responsive ? '-- Store container ref for responsive design\n  self.containerRef = Roact.createRef()' : ''}
end

function ${params.uiType}:didMount()
  ${params.animations ? 'self:playOpenAnimation()' : '-- No animations to play'}
  
  ${params.responsive ? '-- Register for responsive updates if container ref is valid\n  local container = self.containerRef:getValue()\n  if container then\n    UIController.RegisterUI(container.Parent, container)\n  end' : ''}
end

${params.animations ? `
function ${params.uiType}:playOpenAnimation()
  -- Implementation would use a Roact binding or tween
  self:setState({
    animationProgress = 1
  })
end
` : ''}

function ${params.uiType}:render()
  return Roact.createElement("ScreenGui", {
    ResetOnSpawn = false,
    ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
    Enabled = self.state.visible
  }, {
    MainContainer = Roact.createElement("Frame", {
      BackgroundColor3 = StyleModule.Colors.Background,
      BorderSizePixel = 0,
      Position = UDim2.new(0.5, 0, 0.5, 0),
      AnchorPoint = Vector2.new(0.5, 0.5),
      Size = ${params.responsive ? 'UDim2.new(0.8, 0, 0.8, 0)' : 'UDim2.new(0, 600, 0, 400)'},
      ${params.responsive ? '[Roact.Ref] = self.containerRef' : '-- No ref needed'}
    }, ${roactComponents})
  })
end

${params.uiType}.toggle = function(handle)
  local component = Roact.getContext(handle)
  component:setState({
    visible = not component.state.visible
  })
  
  ${params.animations ? 'if component.state.visible then\n    component:playOpenAnimation()\n  end' : '-- No animations to play'}
end

${params.uiType}.hide = function(handle)
  local component = Roact.getContext(handle)
  component:setState({
    visible = false
  })
end

${params.uiType}.show = function(handle)
  local component = Roact.getContext(handle)
  component:setState({
    visible = true
  })
  
  ${params.animations ? 'component:playOpenAnimation()' : '-- No animations to play'}
end

return ${params.uiType}
`;
}

/**
 * Generates the style script
 */
function generateStyleScript(params: UIBuilderParams): string {
  // Get color scheme based on style preset
  const colorScheme = getColorScheme(params);
  
  // Get font and design elements based on style preset
  const fontAndDesign = getFontAndDesign(params.stylePreset);
  
  return `--[[
  UI Style Module for ${params.uiType}
  Generated by Roblox Studio MCP Server
  
  Style: ${params.stylePreset}
]]

local StyleModule = {}

-- Color scheme
StyleModule.Colors = {
  Primary = Color3.fromRGB(${colorScheme.primary}),
  Secondary = Color3.fromRGB(${colorScheme.secondary}),
  Background = Color3.fromRGB(${colorScheme.background}),
  Text = Color3.fromRGB(${colorScheme.text}),
  Accent = Color3.fromRGB(${colorScheme.accent})
}

-- Font settings
StyleModule.Fonts = {
  Title = ${fontAndDesign.titleFont},
  Header = ${fontAndDesign.headerFont},
  Body = ${fontAndDesign.bodyFont},
  Button = ${fontAndDesign.buttonFont}
}

-- Text sizes
StyleModule.TextSizes = {
  Title = 36,
  Header = 24,
  Body = 18,
  Button = 20,
  Small = 14
}

-- Corner properties
StyleModule.CornerRadius = ${fontAndDesign.cornerRadius}

-- Border properties
StyleModule.BorderThickness = ${fontAndDesign.borderThickness}
StyleModule.BorderColor = StyleModule.Colors.${fontAndDesign.borderColor}

-- Padding values
StyleModule.Padding = {
  Small = 4,
  Medium = 8,
  Large = 16,
  ExtraLarge = 24
}

-- Shadow properties
StyleModule.Shadow = {
  Transparency = ${fontAndDesign.shadowTransparency},
  Size = UDim2.new(1, ${fontAndDesign.shadowSize}, 1, ${fontAndDesign.shadowSize})
}

-- Button styles
StyleModule.ButtonStyles = {
  Default = {
    BackgroundColor3 = StyleModule.Colors.Primary,
    TextColor3 = StyleModule.Colors.Text,
    Font = StyleModule.Fonts.Button,
    TextSize = StyleModule.TextSizes.Button
  },
  Secondary = {
    BackgroundColor3 = StyleModule.Colors.Secondary,
    TextColor3 = StyleModule.Colors.Text,
    Font = StyleModule.Fonts.Button,
    TextSize = StyleModule.TextSizes.Button
  },
  Disabled = {
    BackgroundColor3 = Color3.fromRGB(150, 150, 150),
    TextColor3 = Color3.fromRGB(200, 200, 200),
    Font = StyleModule.Fonts.Button,
    TextSize = StyleModule.TextSizes.Button
  }
}

-- Apply button style
function StyleModule.ApplyButtonStyle(button, styleType)
  local style = StyleModule.ButtonStyles[styleType or "Default"]
  
  button.BackgroundColor3 = style.BackgroundColor3
  button.TextColor3 = style.TextColor3
  button.Font = style.Font
  button.TextSize = style.TextSize
  
  -- Add corner if it doesn't exist
  if not button:FindFirstChild("UICorner") then
    local corner = Instance.new("UICorner")
    corner.CornerRadius = StyleModule.CornerRadius
    corner.Parent = button
  end
  
  -- Add padding if it doesn't exist
  if not button:FindFirstChild("UIPadding") then
    local padding = Instance.new("UIPadding")
    padding.PaddingLeft = UDim.new(0, StyleModule.Padding.Medium)
    padding.PaddingRight = UDim.new(0, StyleModule.Padding.Medium)
    padding.PaddingTop = UDim.new(0, StyleModule.Padding.Small)
    padding.PaddingBottom = UDim.new(0, StyleModule.Padding.Small)
    padding.Parent = button
  end
}

-- Apply container style
function StyleModule.ApplyContainerStyle(frame)
  frame.BackgroundColor3 = StyleModule.Colors.Background
  frame.BorderSizePixel = 0
  
  -- Add corner if it doesn't exist
  if not frame:FindFirstChild("UICorner") then
    local corner = Instance.new("UICorner")
    corner.CornerRadius = StyleModule.CornerRadius
    corner.Parent = frame
  end
  
  -- Add shadow if style has shadows
  if StyleModule.Shadow.Transparency < 1 and not frame:FindFirstChild("Shadow") then
    local shadow = Instance.new("ImageLabel")
    shadow.Name = "Shadow"
    shadow.BackgroundTransparency = 1
    shadow.Image = "rbxassetid://1316045217" -- Shadow image
    shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    shadow.ImageTransparency = StyleModule.Shadow.Transparency
    shadow.Position = UDim2.new(0, 0, 0, 0)
    shadow.Size = StyleModule.Shadow.Size
    shadow.ScaleType = Enum.ScaleType.Slice
    shadow.SliceCenter = Rect.new(10, 10, 118, 118)
    shadow.ZIndex = frame.ZIndex - 1
    shadow.Parent = frame
  end
}

-- Apply label style
function StyleModule.ApplyTextStyle(label, styleType)
  if styleType == "Title" then
    label.Font = StyleModule.Fonts.Title
    label.TextSize = StyleModule.TextSizes.Title
  elseif styleType == "Header" then
    label.Font = StyleModule.Fonts.Header
    label.TextSize = StyleModule.TextSizes.Header
  else
    label.Font = StyleModule.Fonts.Body
    label.TextSize = StyleModule.TextSizes.Body
  end
  
  label.TextColor3 = StyleModule.Colors.Text
  label.BackgroundTransparency = 1
}

return StyleModule
`;
}

/**
 * Generates the controller script for responsive and animated UIs
 */
function generateControllerScript(params: UIBuilderParams): string {
  return `--[[
  UI Controller Module for ${params.uiType}
  Generated by Roblox Studio MCP Server
  
  Handles:
  ${params.responsive ? '- Responsive scaling' : ''}
  ${params.animations ? '- UI animations' : ''}
]]

local UIController = {}

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- Track registered UIs for responsive updates
local registeredUIs = {}

${params.responsive ? `
-- Screen size change detection
local viewportSize = workspace.CurrentCamera.ViewportSize
local lastViewportSize = viewportSize

-- Responsive breakpoints
local BREAKPOINTS = {
  SMALL = 600,  -- Phone/small tablet
  MEDIUM = 1024, -- Tablet/small desktop
  LARGE = 1600   -- Large desktop
}

-- Get device type based on viewport size
function UIController.GetDeviceType()
  local width = workspace.CurrentCamera.ViewportSize.X
  
  if width < BREAKPOINTS.SMALL then
    return "SMALL"
  elseif width < BREAKPOINTS.MEDIUM then
    return "MEDIUM"
  else
    return "LARGE"
  end
end

-- Register a UI for responsive updates
function UIController.RegisterUI(screenGui, container)
  local uiData = {
    screenGui = screenGui,
    container = container,
    originalSize = container.Size,
    originalPosition = container.Position
  }
  
  table.insert(registeredUIs, uiData)
  UIController.UpdateUIForDeviceSize(uiData)
end

-- Update a specific UI for the current device size
function UIController.UpdateUIForDeviceSize(uiData)
  local deviceType = UIController.GetDeviceType()
  local container = uiData.container
  
  if deviceType == "SMALL" then
    container.Size = UDim2.new(0.95, 0, 0.9, 0)
  elseif deviceType == "MEDIUM" then
    container.Size = UDim2.new(0.85, 0, 0.85, 0)
  else
    container.Size = UDim2.new(0.8, 0, 0.8, 0)
  end
end

-- Update all registered UIs
function UIController.UpdateAllUIs()
  for _, uiData in ipairs(registeredUIs) do
    UIController.UpdateUIForDeviceSize(uiData)
  end
end

-- Check for viewport size changes
RunService.RenderStepped:Connect(function()
  local currentViewport = workspace.CurrentCamera.ViewportSize
  
  if currentViewport ~= lastViewportSize then
    lastViewportSize = currentViewport
    UIController.UpdateAllUIs()
  end
end)
` : '-- Responsive design disabled'}

${params.animations ? `
-- Animation settings
local ANIMATION_SETTINGS = {
  OpenDuration = 0.5,
  CloseDuration = 0.3,
  EasingStyleOpen = Enum.EasingStyle.Back,
  EasingDirectionOpen = Enum.EasingDirection.Out,
  EasingStyleClose = Enum.EasingStyle.Quad,
  EasingDirectionClose = Enum.EasingDirection.In
}

-- Animation functions
function UIController.PlayOpenAnimation(container)
  -- Store original properties
  local originalSize = container.Size
  local originalPosition = container.Position
  local originalTransparency = container.BackgroundTransparency
  
  -- Set starting properties
  container.Size = UDim2.new(0, 0, 0, 0)
  container.Position = UDim2.new(0.5, 0, 0.5, 0)
  container.BackgroundTransparency = 1
  
  -- Create and play tween
  local tweenInfo = TweenInfo.new(
    ANIMATION_SETTINGS.OpenDuration,
    ANIMATION_SETTINGS.EasingStyleOpen,
    ANIMATION_SETTINGS.EasingDirectionOpen
  )
  
  local properties = {
    Size = originalSize,
    Position = originalPosition,
    BackgroundTransparency = originalTransparency
  }
  
  local tween = TweenService:Create(container, tweenInfo, properties)
  tween:Play()
  
  return tween
end

function UIController.PlayCloseAnimation(container, onComplete)
  -- Create and play tween
  local tweenInfo = TweenInfo.new(
    ANIMATION_SETTINGS.CloseDuration,
    ANIMATION_SETTINGS.EasingStyleClose,
    ANIMATION_SETTINGS.EasingDirectionClose
  )
  
  local properties = {
    Size = UDim2.new(0, 0, 0, 0),
    Position = UDim2.new(0.5, 0, 0.5, 0),
    BackgroundTransparency = 1
  }
  
  local tween = TweenService:Create(container, tweenInfo, properties)
  
  if onComplete then
    tween.Completed:Connect(onComplete)
  end
  
  tween:Play()
  
  return tween
end
` : '-- Animations disabled'}

return UIController
`;
}

/**
 * Generates usage instructions
 */
function generateUsageInstructions(params: UIBuilderParams): string {
  return `# ${params.uiType} UI System Usage Instructions

## Overview
This UI system provides a ${params.stylePreset}-styled ${params.uiType} interface for your Roblox game. 
${params.responsive ? 'It is responsive and will adapt to different screen sizes.' : ''}
${params.animations ? 'It includes animations for a more polished user experience.' : ''}

## Setup Instructions

1. Create a new folder named "UI" in ReplicatedStorage
2. Create the following script modules:

${params.useRoactComponents ? 
  '   - **' + params.uiType + '.lua** (ModuleScript) - The main Roact component\n   - **StyleModule.lua** (ModuleScript) - Contains styling information' :
  '   - **' + params.uiType + 'UI.lua** (ModuleScript) - The main UI script\n   - **StyleModule.lua** (ModuleScript) - Contains styling information'}
${params.responsive || params.animations ? '\n   - **UIController.lua** (ModuleScript) - Handles responsive design and animations' : ''}

3. Copy the provided code into each module

## Usage Example

\`\`\`lua
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")

${params.useRoactComponents ? 
  '-- Import Roact\nlocal Roact = require(ReplicatedStorage:WaitForChild("Packages"):WaitForChild("Roact"))\n\n-- Import the UI component\nlocal ' + params.uiType + ' = require(ReplicatedStorage:WaitForChild("UI"):WaitForChild("' + params.uiType + '"))' : 
  '-- Import the UI module\nlocal ' + params.uiType + 'UI = require(ReplicatedStorage:WaitForChild("UI"):WaitForChild("' + params.uiType + 'UI"))'}

-- Example for when to show the UI
local function showUIExample()
  ${params.useRoactComponents ? 
    '-- Mount the Roact component\n  local handle = Roact.mount(Roact.createElement(' + params.uiType + '), Players.LocalPlayer.PlayerGui, "' + params.uiType + 'UI")\n  \n  -- Store the handle for later use\n  _G.' + params.uiType + 'Handle = handle' : 
    '-- Show the UI\n  ' + params.uiType + 'UI.Show()'}
end

-- Example for when to hide the UI
local function hideUIExample()
  ${params.useRoactComponents ? 
    '-- Hide through the component API\n  if _G.' + params.uiType + 'Handle then\n    ' + params.uiType + '.hide(_G.' + params.uiType + 'Handle)\n  end' : 
    '-- Hide the UI\n  ' + params.uiType + 'UI.Hide()'}
end

-- Example for when to toggle the UI
local function toggleUIExample()
  ${params.useRoactComponents ? 
    '-- Toggle through the component API\n  if _G.' + params.uiType + 'Handle then\n    ' + params.uiType + '.toggle(_G.' + params.uiType + 'Handle)\n  end' : 
    '-- Toggle the UI\n  ' + params.uiType + 'UI.Toggle()'}
end
\`\`\`

## Notes

- The UI is designed with a ${params.stylePreset} visual style
- Elements included: ${params.elements.join(', ')}
- Layout system: ${params.layout}
${params.responsive ? '- The UI will automatically adjust for different screen sizes' : ''}
${params.animations ? '- Animations are included for opening and closing the UI' : ''}
${params.useRoactComponents ? '- This implementation uses Roact components and requires the Roact library in ReplicatedStorage.Packages' : ''}

## Customization

You can customize the appearance by modifying the StyleModule. It contains:
- Color schemes
- Font settings
- Text sizes
- Corner radius and border settings
- Padding values
- Shadow properties
- Button styles

## Advanced Features

${params.responsive ? '- **Responsive Design**: The UI adjusts to different screen sizes using breakpoints for small, medium, and large displays.' : ''}
${params.animations ? '- **Animations**: Includes open and close animations with customizable duration and easing styles.' : ''}
${params.useRoactComponents ? '- **Roact Components**: Implemented using Roact component system for better state management.' : ''}`;
}

/**
 * Generates layout code based on the layout type
 */
function generateLayoutCode(layout: string): string {
  switch (layout) {
    case 'Grid':
      return `
-- Create grid layout
local UIGridLayout = Instance.new("UIGridLayout")
UIGridLayout.CellPadding = UDim2.new(0, 10, 0, 10)
UIGridLayout.CellSize = UDim2.new(0.3, -10, 0.3, -10)
UIGridLayout.SortOrder = Enum.SortOrder.LayoutOrder
UIGridLayout.Parent = MainContainer`;
    
    case 'List':
      return `
-- Create list layout
local UIListLayout = Instance.new("UIListLayout")
UIListLayout.Padding = UDim.new(0, 10)
UIListLayout.FillDirection = Enum.FillDirection.Vertical
UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
UIListLayout.Parent = MainContainer

-- Add padding
local UIPadding = Instance.new("UIPadding")
UIPadding.PaddingTop = UDim.new(0, 15)
UIPadding.PaddingBottom = UDim.new(0, 15)
UIPadding.PaddingLeft = UDim.new(0, 15)
UIPadding.PaddingRight = UDim.new(0, 15)
UIPadding.Parent = MainContainer`;
    
    case 'Flex':
      return `
-- Create flex layout (UIListLayout with dynamic sizing)
local UIListLayout = Instance.new("UIListLayout")
UIListLayout.Padding = UDim.new(0, 10)
UIListLayout.FillDirection = Enum.FillDirection.Vertical
UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
UIListLayout.Parent = MainContainer

-- Handle resizing for flex layout
local function updateFlexLayout()
  local contentSize = UIListLayout.AbsoluteContentSize
  MainContainer.CanvasSize = UDim2.new(0, 0, 0, contentSize.Y + 30)
end
UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(updateFlexLayout)

-- Add padding
local UIPadding = Instance.new("UIPadding")
UIPadding.PaddingTop = UDim.new(0, 15)
UIPadding.PaddingBottom = UDim.new(0, 15)
UIPadding.PaddingLeft = UDim.new(0, 15)
UIPadding.PaddingRight = UDim.new(0, 15)
UIPadding.Parent = MainContainer`;
    
    case 'Mixed':
      return `
-- Create mixed layout (main vertical list with horizontal sections)
local UIListLayout = Instance.new("UIListLayout")
UIListLayout.Padding = UDim.new(0, 15)
UIListLayout.FillDirection = Enum.FillDirection.Vertical
UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
UIListLayout.Parent = MainContainer

-- Add padding
local UIPadding = Instance.new("UIPadding")
UIPadding.PaddingTop = UDim.new(0, 20)
UIPadding.PaddingBottom = UDim.new(0, 20)
UIPadding.PaddingLeft = UDim.new(0, 20)
UIPadding.PaddingRight = UDim.new(0, 20)
UIPadding.Parent = MainContainer

-- Function to create horizontal sections
local function createHorizontalSection(parent, name)
  local section = Instance.new("Frame")
  section.Name = name
  section.BackgroundTransparency = 1
  section.Size = UDim2.new(1, 0, 0, 40)
  section.Parent = parent
  
  local horizontalLayout = Instance.new("UIListLayout")
  horizontalLayout.Padding = UDim.new(0, 10)
  horizontalLayout.FillDirection = Enum.FillDirection.Horizontal
  horizontalLayout.VerticalAlignment = Enum.VerticalAlignment.Center
  horizontalLayout.SortOrder = Enum.SortOrder.LayoutOrder
  horizontalLayout.Parent = section
  
  return section
end`;
    
    default:
      return '-- No layout specified';
  }
}

/**
 * Generates animations code based on UI type
 */
function generateAnimationsCode(uiType: string): string {
  return `
-- Animation functions
local function playOpenAnimation()
  local openTweenInfo = TweenInfo.new(
    0.5,                          -- Duration
    Enum.EasingStyle.Back,        -- Easing style
    Enum.EasingDirection.Out      -- Easing direction
  )
  
  -- Initial state
  MainContainer.Size = UDim2.new(0, 0, 0, 0)
  MainContainer.Position = UDim2.new(0.5, 0, 0.5, 0)
  MainContainer.BackgroundTransparency = 1
  
  -- Final state
  local properties = {
    Size = ${uiType === 'HUD' ? 'UDim2.new(0.3, 0, 0.5, 0)' : 'UDim2.new(0.8, 0, 0.8, 0)'},
    Position = ${uiType === 'HUD' ? 'UDim2.new(0.05, 0, 0.5, 0)' : 'UDim2.new(0.5, 0, 0.5, 0)'},
    BackgroundTransparency = 0
  }
  
  -- Create and play tween
  local tween = TweenService:Create(MainContainer, openTweenInfo, properties)
  tween:Play()
  
  -- Animate children
  for _, child in ipairs(MainContainer:GetChildren()) do
    if child:IsA("GuiObject") and child.Name ~= "UIListLayout" and child.Name ~= "UIGridLayout" and child.Name ~= "UIPadding" then
      child.BackgroundTransparency = 1
      child.TextTransparency = 1
      
      TweenService:Create(child, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, false, 0.2), {
        BackgroundTransparency = 0,
        TextTransparency = 0
      }):Play()
    end
  end
end

local function playCloseAnimation(callback)
  local closeTweenInfo = TweenInfo.new(
    0.3,                          -- Duration
    Enum.EasingStyle.Quad,        -- Easing style
    Enum.EasingDirection.In       -- Easing direction
  )
  
  -- Final state
  local properties = {
    Size = UDim2.new(0, 0, 0, 0),
    Position = UDim2.new(0.5, 0, 0.5, 0),
    BackgroundTransparency = 1
  }
  
  -- Create and play tween
  local tween = TweenService:Create(MainContainer, closeTweenInfo, properties)
  
  -- Connect callback if provided
  if callback then
    tween.Completed:Connect(callback)
  end
  
  tween:Play()
end`;
}

/**
 * Gets UI hierarchy based on UI type and elements
 */
function getUIHierarchy(params: UIBuilderParams): string {
  const { uiType, elements } = params;
  let hierarchy = '';
  
  // Add title
  hierarchy += `
-- Create title
local TitleLabel = Instance.new("TextLabel")
TitleLabel.Name = "TitleLabel"
TitleLabel.Size = UDim2.new(1, 0, 0, 50)
TitleLabel.BackgroundTransparency = 1
TitleLabel.Font = Enum.Font.SourceSansBold
TitleLabel.Text = "${uiType}"
TitleLabel.TextColor3 = StyleModule.Colors.Text
TitleLabel.TextSize = 32
TitleLabel.LayoutOrder = 1
TitleLabel.Parent = MainContainer
`;
  
  // Process elements based on UI type
  let elementCounter = 2;
  
  if (uiType === 'Menu') {
    // Create menu buttons
    for (const element of elements) {
      if (element.includes('Button')) {
        hierarchy += `
-- Create ${element}
local ${element} = Instance.new("TextButton")
${element}.Name = "${element}"
${element}.Size = UDim2.new(0.8, 0, 0, 50)
${element}.BackgroundColor3 = StyleModule.Colors.Primary
${element}.Font = Enum.Font.SourceSansSemibold
${element}.Text = "${element.replace('Button', '')}"
${element}.TextColor3 = StyleModule.Colors.Text
${element}.TextSize = 24
${element}.LayoutOrder = ${elementCounter++}
${element}.Parent = MainContainer

-- Add corner to button
local ${element}Corner = Instance.new("UICorner")
${element}Corner.CornerRadius = UDim.new(0, 8)
${element}Corner.Parent = ${element}

-- Add hover effect
${element}.MouseEnter:Connect(function()
  TweenService:Create(${element}, TweenInfo.new(0.2), {
    BackgroundColor3 = StyleModule.Colors.Secondary
  }):Play()
end)

${element}.MouseLeave:Connect(function()
  TweenService:Create(${element}, TweenInfo.new(0.2), {
    BackgroundColor3 = StyleModule.Colors.Primary
  }):Play()
end)
`;
      }
    }
  } else if (uiType === 'HUD') {
    // Create HUD elements
    for (const element of elements) {
      if (element.includes('Label')) {
        hierarchy += `
-- Create ${element}
local ${element} = Instance.new("TextLabel")
${element}.Name = "${element}"
${element}.Size = UDim2.new(1, 0, 0, 30)
${element}.BackgroundTransparency = 0.5
${element}.BackgroundColor3 = StyleModule.Colors.Secondary
${element}.Font = Enum.Font.SourceSans
${element}.Text = "${element.replace('Label', '')}: 0"
${element}.TextColor3 = StyleModule.Colors.Text
${element}.TextSize = 18
${element}.LayoutOrder = ${elementCounter++}
${element}.Parent = MainContainer

-- Add corner to label
local ${element}Corner = Instance.new("UICorner")
${element}Corner.CornerRadius = UDim.new(0, 6)
${element}Corner.Parent = ${element}
`;
      } else if (element.includes('Bar')) {
        hierarchy += `
-- Create ${element} container
local ${element}Container = Instance.new("Frame")
${element}Container.Name = "${element}Container"
${element}Container.Size = UDim2.new(1, 0, 0, 30)
${element}Container.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
${element}Container.BackgroundTransparency = 0.5
${element}Container.LayoutOrder = ${elementCounter++}
${element}Container.Parent = MainContainer

-- Add corner to container
local ${element}ContainerCorner = Instance.new("UICorner")
${element}ContainerCorner.CornerRadius = UDim.new(0, 6)
${element}ContainerCorner.Parent = ${element}Container

-- Create ${element} fill
local ${element} = Instance.new("Frame")
${element}.Name = "${element}"
${element}.Size = UDim2.new(0.7, 0, 1, 0)
${element}.BackgroundColor3 = StyleModule.Colors.Primary
${element}.BorderSizePixel = 0
${element}.Parent = ${element}Container

-- Add corner to fill
local ${element}Corner = Instance.new("UICorner")
${element}Corner.CornerRadius = UDim.new(0, 6)
${element}Corner.Parent = ${element}

-- Create ${element} text
local ${element}Text = Instance.new("TextLabel")
${element}Text.Name = "${element}Text"
${element}Text.Size = UDim2.new(1, 0, 1, 0)
${element}Text.BackgroundTransparency = 1
${element}Text.Font = Enum.Font.SourceSansSemibold
${element}Text.Text = "${element.replace('Bar', '')}: 70%"
${element}Text.TextColor3 = StyleModule.Colors.Text
${element}Text.TextSize = 16
${element}Text.Parent = ${element}Container
`;
      }
    }
  } else if (uiType === 'Dialog') {
    // Create dialog elements
    hierarchy += `
-- Create dialog text
local DialogText = Instance.new("TextLabel")
DialogText.Name = "DialogText"
DialogText.Size = UDim2.new(1, 0, 0.6, 0)
DialogText.BackgroundTransparency = 1
DialogText.Font = Enum.Font.SourceSans
DialogText.Text = "This is a dialog message. You can replace this with your own text."
DialogText.TextColor3 = StyleModule.Colors.Text
DialogText.TextSize = 20
DialogText.TextWrapped = true
DialogText.LayoutOrder = ${elementCounter++}
DialogText.Parent = MainContainer

-- Create buttons container
local ButtonsContainer = Instance.new("Frame")
ButtonsContainer.Name = "ButtonsContainer"
ButtonsContainer.Size = UDim2.new(1, 0, 0.2, 0)
ButtonsContainer.BackgroundTransparency = 1
ButtonsContainer.LayoutOrder = ${elementCounter++}
ButtonsContainer.Parent = MainContainer

-- Create horizontal layout for buttons
local ButtonsLayout = Instance.new("UIListLayout")
ButtonsLayout.FillDirection = Enum.FillDirection.Horizontal
ButtonsLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
ButtonsLayout.Padding = UDim.new(0, 20)
ButtonsLayout.SortOrder = Enum.SortOrder.LayoutOrder
ButtonsLayout.Parent = ButtonsContainer
`;

    // Add response buttons
    let buttonCounter = 1;
    for (const element of elements) {
      if (element.includes('Button')) {
        hierarchy += `
-- Create ${element}
local ${element} = Instance.new("TextButton")
${element}.Name = "${element}"
${element}.Size = UDim2.new(0.4, 0, 1, 0)
${element}.BackgroundColor3 = ${buttonCounter === 1 ? 'StyleModule.Colors.Primary' : 'StyleModule.Colors.Secondary'}
${element}.Font = Enum.Font.SourceSansSemibold
${element}.Text = "${element.replace('Button', '')}"
${element}.TextColor3 = StyleModule.Colors.Text
${element}.TextSize = 20
${element}.LayoutOrder = ${buttonCounter++}
${element}.Parent = ButtonsContainer

-- Add corner to button
local ${element}Corner = Instance.new("UICorner")
${element}Corner.CornerRadius = UDim.new(0, 8)
${element}Corner.Parent = ${element}

-- Add hover effect
${element}.MouseEnter:Connect(function()
  TweenService:Create(${element}, TweenInfo.new(0.2), {
    BackgroundColor3 = StyleModule.Colors.Accent
  }):Play()
end)

${element}.MouseLeave:Connect(function()
  TweenService:Create(${element}, TweenInfo.new(0.2), {
    BackgroundColor3 = ${buttonCounter === 1 ? 'StyleModule.Colors.Primary' : 'StyleModule.Colors.Secondary'}
  }):Play()
end)
`;
      }
    }
  } else if (uiType === 'Inventory') {
    // Create inventory elements
    hierarchy += `
-- Create inventory description
local DescriptionLabel = Instance.new("TextLabel")
DescriptionLabel.Name = "DescriptionLabel"
DescriptionLabel.Size = UDim2.new(1, 0, 0, 30)
DescriptionLabel.BackgroundTransparency = 1
DescriptionLabel.Font = Enum.Font.SourceSans
DescriptionLabel.Text = "Your Inventory"
DescriptionLabel.TextColor3 = StyleModule.Colors.Text
DescriptionLabel.TextSize = 18
DescriptionLabel.LayoutOrder = ${elementCounter++}
DescriptionLabel.Parent = MainContainer

-- Create items container
local ItemsContainer = Instance.new("ScrollingFrame")
ItemsContainer.Name = "ItemsContainer"
ItemsContainer.Size = UDim2.new(1, 0, 0.7, 0)
ItemsContainer.BackgroundTransparency = 0.5
ItemsContainer.BackgroundColor3 = StyleModule.Colors.Secondary
ItemsContainer.BorderSizePixel = 0
ItemsContainer.ScrollBarThickness = 6
ItemsContainer.LayoutOrder = ${elementCounter++}
ItemsContainer.Parent = MainContainer

-- Add corner to items container
local ItemsContainerCorner = Instance.new("UICorner")
ItemsContainerCorner.CornerRadius = UDim.new(0, 8)
ItemsContainerCorner.Parent = ItemsContainer

-- Create grid layout for items
local ItemsGridLayout = Instance.new("UIGridLayout")
ItemsGridLayout.CellPadding = UDim2.new(0, 10, 0, 10)
ItemsGridLayout.CellSize = UDim2.new(0.2, -10, 0.2, -10)
ItemsGridLayout.SortOrder = Enum.SortOrder.LayoutOrder
ItemsGridLayout.Parent = ItemsContainer

-- Add padding to items container
local ItemsPadding = Instance.new("UIPadding")
ItemsPadding.PaddingTop = UDim.new(0, 10)
ItemsPadding.PaddingBottom = UDim.new(0, 10)
ItemsPadding.PaddingLeft = UDim.new(0, 10)
ItemsPadding.PaddingRight = UDim.new(0, 10)
ItemsPadding.Parent = ItemsContainer

-- Create sample inventory items
for i = 1, 12 do
  local ItemFrame = Instance.new("Frame")
  ItemFrame.Name = "Item" .. i
  ItemFrame.BackgroundColor3 = StyleModule.Colors.Primary
  ItemFrame.LayoutOrder = i
  ItemFrame.Parent = ItemsContainer
  
  -- Add corner to item
  local ItemCorner = Instance.new("UICorner")
  ItemCorner.CornerRadius = UDim.new(0, 6)
  ItemCorner.Parent = ItemFrame
  
  -- Add item image
  local ItemImage = Instance.new("ImageLabel")
  ItemImage.Name = "ItemImage"
  ItemImage.Size = UDim2.new(0.8, 0, 0.8, 0)
  ItemImage.Position = UDim2.new(0.5, 0, 0.4, 0)
  ItemImage.AnchorPoint = Vector2.new(0.5, 0.5)
  ItemImage.BackgroundTransparency = 1
  ItemImage.Image = "rbxassetid://3926307971" -- Placeholder image
  ItemImage.ImageRectOffset = Vector2.new(804, 44) -- Example icon from image
  ItemImage.ImageRectSize = Vector2.new(36, 36)
  ItemImage.Parent = ItemFrame
  
  -- Add item label
  local ItemLabel = Instance.new("TextLabel")
  ItemLabel.Name = "ItemLabel"
  ItemLabel.Size = UDim2.new(1, 0, 0.2, 0)
  ItemLabel.Position = UDim2.new(0, 0, 0.8, 0)
  ItemLabel.BackgroundTransparency = 1
  ItemLabel.Font = Enum.Font.SourceSans
  ItemLabel.Text = "Item " .. i
  ItemLabel.TextColor3 = StyleModule.Colors.Text
  ItemLabel.TextSize = 14
  ItemLabel.Parent = ItemFrame
end
`;
  } else {
    // Create generic elements for other UI types
    for (const element of elements) {
      if (element.includes('Button')) {
        hierarchy += `
-- Create ${element}
local ${element} = Instance.new("TextButton")
${element}.Name = "${element}"
${element}.Size = UDim2.new(0.8, 0, 0, 40)
${element}.BackgroundColor3 = StyleModule.Colors.Primary
${element}.Font = Enum.Font.SourceSansSemibold
${element}.Text = "${element.replace('Button', '')}"
${element}.TextColor3 = StyleModule.Colors.Text
${element}.TextSize = 18
${element}.LayoutOrder = ${elementCounter++}
${element}.Parent = MainContainer

-- Add corner to button
local ${element}Corner = Instance.new("UICorner")
${element}Corner.CornerRadius = UDim.new(0, 8)
${element}Corner.Parent = ${element}
`;
      } else if (element.includes('Label')) {
        hierarchy += `
-- Create ${element}
local ${element} = Instance.new("TextLabel")
${element}.Name = "${element}"
${element}.Size = UDim2.new(1, 0, 0, 30)
${element}.BackgroundTransparency = 1
${element}.Font = Enum.Font.SourceSans
${element}.Text = "${element.replace('Label', '')}"
${element}.TextColor3 = StyleModule.Colors.Text
${element}.TextSize = 18
${element}.LayoutOrder = ${elementCounter++}
${element}.Parent = MainContainer
`;
      } else if (element.includes('Input')) {
        hierarchy += `
-- Create ${element} container
local ${element}Container = Instance.new("Frame")
${element}Container.Name = "${element}Container"
${element}Container.Size = UDim2.new(0.8, 0, 0, 40)
${element}Container.BackgroundColor3 = StyleModule.Colors.Secondary
${element}Container.BackgroundTransparency = 0.5
${element}Container.LayoutOrder = ${elementCounter++}
${element}Container.Parent = MainContainer

-- Add corner to container
local ${element}ContainerCorner = Instance.new("UICorner")
${element}ContainerCorner.CornerRadius = UDim.new(0, 6)
${element}ContainerCorner.Parent = ${element}Container

-- Create ${element} label
local ${element}Label = Instance.new("TextLabel")
${element}Label.Name = "${element}Label"
${element}Label.Size = UDim2.new(0.3, 0, 1, 0)
${element}Label.BackgroundTransparency = 1
${element}Label.Font = Enum.Font.SourceSans
${element}Label.Text = "${element.replace('Input', '')}:"
${element}Label.TextColor3 = StyleModule.Colors.Text
${element}Label.TextSize = 16
${element}Label.TextXAlignment = Enum.TextXAlignment.Left
${element}Label.Parent = ${element}Container

-- Add padding to label
local ${element}LabelPadding = Instance.new("UIPadding")
${element}LabelPadding.PaddingLeft = UDim.new(0, 10)
${element}LabelPadding.Parent = ${element}Label

-- Create ${element} box
local ${element}Box = Instance.new("TextBox")
${element}Box.Name = "${element}Box"
${element}Box.Size = UDim2.new(0.7, 0, 1, 0)
${element}Box.Position = UDim2.new(0.3, 0, 0, 0)
${element}Box.BackgroundTransparency = 1
${element}Box.Font = Enum.Font.SourceSans
${element}Box.PlaceholderText = "Enter ${element.replace('Input', '')}..."
${element}Box.Text = ""
${element}Box.TextColor3 = StyleModule.Colors.Text
${element}Box.TextSize = 16
${element}Box.Parent = ${element}Container
`;
      } else if (element.includes('Frame')) {
        hierarchy += `
-- Create ${element}
local ${element} = Instance.new("Frame")
${element}.Name = "${element}"
${element}.Size = UDim2.new(1, 0, 0.4, 0)
${element}.BackgroundColor3 = StyleModule.Colors.Secondary
${element}.BackgroundTransparency = 0.3
${element}.LayoutOrder = ${elementCounter++}
${element}.Parent = MainContainer

-- Add corner to frame
local ${element}Corner = Instance.new("UICorner")
${element}Corner.CornerRadius = UDim.new(0, 8)
${element}Corner.Parent = ${element}
`;
      }
    }
  }
  
  // Add close button if not HUD
  if (uiType !== 'HUD') {
    hierarchy += `
-- Create close button
local CloseButton = Instance.new("TextButton")
CloseButton.Name = "CloseButton"
CloseButton.Size = UDim2.new(0, 30, 0, 30)
CloseButton.Position = UDim2.new(1, -15, 0, 15)
CloseButton.AnchorPoint = Vector2.new(1, 0)
CloseButton.BackgroundColor3 = StyleModule.Colors.Primary
CloseButton.Font = Enum.Font.SourceSansBold
CloseButton.Text = "X"
CloseButton.TextColor3 = StyleModule.Colors.Text
CloseButton.TextSize = 18
CloseButton.Parent = MainContainer

-- Add corner to close button
local CloseButtonCorner = Instance.new("UICorner")
CloseButtonCorner.CornerRadius = UDim.new(1, 0) -- Make it circular
CloseButtonCorner.Parent = CloseButton

-- Add close button functionality
CloseButton.MouseButton1Click:Connect(function()
  ${params.animations ? 'playCloseAnimation(function()\n    ' + params.uiType + 'UI.Enabled = false\n  end)' : params.uiType + 'UI.Enabled = false'}
end)
`;
  }
  
  return hierarchy;
}

/**
 * Gets Roact components based on UI type and elements
 */
function getRoactComponents(params: UIBuilderParams): string {
  const { uiType, elements } = params;
  
  switch (uiType) {
    case 'Menu':
      return `{
      TitleLabel = Roact.createElement("TextLabel", {
        Size = UDim2.new(1, 0, 0, 50),
        BackgroundTransparency = 1,
        Font = StyleModule.Fonts.Title,
        Text = "Menu",
        TextColor3 = StyleModule.Colors.Text,
        TextSize = StyleModule.TextSizes.Title,
        LayoutOrder = 1
      }),
      
      UIListLayout = Roact.createElement("UIListLayout", {
        Padding = UDim.new(0, 10),
        FillDirection = Enum.FillDirection.Vertical,
        HorizontalAlignment = Enum.HorizontalAlignment.Center,
        SortOrder = Enum.SortOrder.LayoutOrder
      }),
      
      UIPadding = Roact.createElement("UIPadding", {
        PaddingTop = UDim.new(0, 15),
        PaddingBottom = UDim.new(0, 15),
        PaddingLeft = UDim.new(0, 15),
        PaddingRight = UDim.new(0, 15)
      }),
      
      ${elements.filter(e => e.includes('Button')).map((button, index) => `
      ${button} = Roact.createElement("TextButton", {
        Size = UDim2.new(0.8, 0, 0, 50),
        BackgroundColor3 = StyleModule.Colors.Primary,
        Font = StyleModule.Fonts.Button,
        Text = "${button.replace('Button', '')}",
        TextColor3 = StyleModule.Colors.Text,
        TextSize = StyleModule.TextSizes.Button,
        LayoutOrder = ${index + 2},
        [Roact.Event.MouseEnter] = function(rbx)
          -- Hover effect
        end,
        [Roact.Event.MouseLeave] = function(rbx)
          -- Hover effect end
        end,
        [Roact.Event.MouseButton1Click] = function()
          -- Button click handler
        end
      }, {
        UICorner = Roact.createElement("UICorner", {
          CornerRadius = StyleModule.CornerRadius
        })
      })${index < elements.filter(e => e.includes('Button')).length - 1 ? ',' : ''}
      `).join('')}
    }`;
    
    case 'Dialog':
      return `{
      TitleLabel = Roact.createElement("TextLabel", {
        Size = UDim2.new(1, 0, 0, 50),
        BackgroundTransparency = 1,
        Font = StyleModule.Fonts.Title,
        Text = "Dialog",
        TextColor3 = StyleModule.Colors.Text,
        TextSize = StyleModule.TextSizes.Title,
        LayoutOrder = 1
      }),
      
      UIListLayout = Roact.createElement("UIListLayout", {
        Padding = UDim.new(0, 15),
        FillDirection = Enum.FillDirection.Vertical,
        HorizontalAlignment = Enum.HorizontalAlignment.Center,
        SortOrder = Enum.SortOrder.LayoutOrder
      }),
      
      UIPadding = Roact.createElement("UIPadding", {
        PaddingTop = UDim.new(0, 20),
        PaddingBottom = UDim.new(0, 20),
        PaddingLeft = UDim.new(0, 20),
        PaddingRight = UDim.new(0, 20)
      }),
      
      DialogText = Roact.createElement("TextLabel", {
        Size = UDim2.new(1, 0, 0.6, 0),
        BackgroundTransparency = 1,
        Font = StyleModule.Fonts.Body,
        Text = "This is a dialog message. You can replace this with your own text.",
        TextColor3 = StyleModule.Colors.Text,
        TextSize = StyleModule.TextSizes.Body,
        TextWrapped = true,
        LayoutOrder = 2
      }),
      
      ButtonsContainer = Roact.createElement("Frame", {
        Size = UDim2.new(1, 0, 0.2, 0),
        BackgroundTransparency = 1,
        LayoutOrder = 3
      }, {
        UIListLayout = Roact.createElement("UIListLayout", {
          FillDirection = Enum.FillDirection.Horizontal,
          HorizontalAlignment = Enum.HorizontalAlignment.Center,
          Padding = UDim.new(0, 20),
          SortOrder = Enum.SortOrder.LayoutOrder
        }),
        
        ${elements.filter(e => e.includes('Button')).map((button, index) => `
        ${button} = Roact.createElement("TextButton", {
          Size = UDim2.new(0.4, 0, 1, 0),
          BackgroundColor3 = ${index === 0 ? 'StyleModule.Colors.Primary' : 'StyleModule.Colors.Secondary'},
          Font = StyleModule.Fonts.Button,
          Text = "${button.replace('Button', '')}",
          TextColor3 = StyleModule.Colors.Text,
          TextSize = StyleModule.TextSizes.Button,
          LayoutOrder = ${index + 1},
          [Roact.Event.MouseButton1Click] = function()
            -- Button click handler
          end
        }, {
          UICorner = Roact.createElement("UICorner", {
            CornerRadius = StyleModule.CornerRadius
          })
        })${index < elements.filter(e => e.includes('Button')).length - 1 ? ',' : ''}
        `).join('')}
      }),
      
      CloseButton = Roact.createElement("TextButton", {
        Size = UDim2.new(0, 30, 0, 30),
        Position = UDim2.new(1, -15, 0, 15),
        AnchorPoint = Vector2.new(1, 0),
        BackgroundColor3 = StyleModule.Colors.Primary,
        Font = StyleModule.Fonts.Body,
        Text = "X",
        TextColor3 = StyleModule.Colors.Text,
        TextSize = StyleModule.TextSizes.Body,
        [Roact.Event.MouseButton1Click] = function()
          self:setState({ visible = false })
        end
      }, {
        UICorner = Roact.createElement("UICorner", {
          CornerRadius = UDim.new(1, 0)
        })
      })
    }`;
    
    default:
      return `{
      TitleLabel = Roact.createElement("TextLabel", {
        Size = UDim2.new(1, 0, 0, 50),
        BackgroundTransparency = 1,
        Font = StyleModule.Fonts.Title,
        Text = "${uiType}",
        TextColor3 = StyleModule.Colors.Text,
        TextSize = StyleModule.TextSizes.Title,
        LayoutOrder = 1
      }),
      
      UIListLayout = Roact.createElement("UIListLayout", {
        Padding = UDim.new(0, 10),
        FillDirection = Enum.FillDirection.Vertical,
        HorizontalAlignment = Enum.HorizontalAlignment.Center,
        SortOrder = Enum.SortOrder.LayoutOrder
      }),
      
      UIPadding = Roact.createElement("UIPadding", {
        PaddingTop = UDim.new(0, 15),
        PaddingBottom = UDim.new(0, 15),
        PaddingLeft = UDim.new(0, 15),
        PaddingRight = UDim.new(0, 15)
      }),
      
      CloseButton = Roact.createElement("TextButton", {
        Size = UDim2.new(0, 30, 0, 30),
        Position = UDim2.new(1, -15, 0, 15),
        AnchorPoint = Vector2.new(1, 0),
        BackgroundColor3 = StyleModule.Colors.Primary,
        Font = StyleModule.Fonts.Body,
        Text = "X",
        TextColor3 = StyleModule.Colors.Text,
        TextSize = StyleModule.TextSizes.Body,
        [Roact.Event.MouseButton1Click] = function()
          self:setState({ visible = false })
        end
      }, {
        UICorner = Roact.createElement("UICorner", {
          CornerRadius = UDim.new(1, 0)
        })
      }),
      
      -- Add generic elements
      ${elements.map((element, index) => {
        if (element.includes('Button')) {
          return `
      ${element} = Roact.createElement("TextButton", {
        Size = UDim2.new(0.8, 0, 0, 40),
        BackgroundColor3 = StyleModule.Colors.Primary,
        Font = StyleModule.Fonts.Button,
        Text = "${element.replace('Button', '')}",
        TextColor3 = StyleModule.Colors.Text,
        TextSize = StyleModule.TextSizes.Button,
        LayoutOrder = ${index + 2},
        [Roact.Event.MouseButton1Click] = function()
          -- Button click handler
        end
      }, {
        UICorner = Roact.createElement("UICorner", {
          CornerRadius = StyleModule.CornerRadius
        })
      })`;
        } else if (element.includes('Label')) {
          return `
      ${element} = Roact.createElement("TextLabel", {
        Size = UDim2.new(1, 0, 0, 30),
        BackgroundTransparency = 1,
        Font = StyleModule.Fonts.Body,
        Text = "${element.replace('Label', '')}",
        TextColor3 = StyleModule.Colors.Text,
        TextSize = StyleModule.TextSizes.Body,
        LayoutOrder = ${index + 2}
      })`;
        } else if (element.includes('Frame')) {
          return `
      ${element} = Roact.createElement("Frame", {
        Size = UDim2.new(1, 0, 0.4, 0),
        BackgroundColor3 = StyleModule.Colors.Secondary,
        BackgroundTransparency = 0.3,
        LayoutOrder = ${index + 2}
      }, {
        UICorner = Roact.createElement("UICorner", {
          CornerRadius = StyleModule.CornerRadius
        })
      })`;
        }
        return '';
      }).filter(Boolean).join(',')}
    }`;
  }
}

/**
 * Gets color scheme based on the style and custom colors
 */
function getColorScheme(params: UIBuilderParams): { 
  primary: string, 
  secondary: string, 
  background: string, 
  text: string, 
  accent: string 
} {
  // Default colors if custom scheme isn't provided
  const defaultSchemes: Record<string, any> = {
    Modern: {
      primary: '65, 105, 225',    // Royal Blue
      secondary: '100, 149, 237', // Cornflower Blue
      background: '240, 248, 255', // Alice Blue
      text: '25, 25, 112',        // Midnight Blue
      accent: '30, 144, 255'      // Dodger Blue
    },
    Retro: {
      primary: '255, 87, 51',     // Tomato
      secondary: '255, 195, 0',   // Amber
      background: '25, 25, 25',   // Dark
      text: '245, 245, 245',      // White Smoke
      accent: '138, 43, 226'      // Blue Violet
    },
    Minimalist: {
      primary: '40, 40, 40',      // Dark Gray
      secondary: '100, 100, 100', // Medium Gray
      background: '250, 250, 250', // Off White
      text: '20, 20, 20',         // Almost Black
      accent: '200, 0, 0'         // Red
    },
    Fantasy: {
      primary: '75, 0, 130',      // Indigo
      secondary: '138, 43, 226',  // Blue Violet
      background: '25, 25, 50',   // Dark Blue-Gray
      text: '230, 230, 250',      // Lavender
      accent: '255, 215, 0'       // Gold
    },
    SciFi: {
      primary: '0, 191, 255',     // Deep Sky Blue
      secondary: '30, 144, 255',  // Dodger Blue
      background: '5, 15, 25',    // Very Dark Blue
      text: '220, 220, 220',      // Light Gray
      accent: '0, 255, 127'       // Spring Green
    },
    Custom: {
      primary: '70, 130, 180',    // Steel Blue
      secondary: '95, 158, 160',  // Cadet Blue
      background: '245, 245, 245', // White Smoke
      text: '47, 79, 79',         // Dark Slate Gray
      accent: '255, 99, 71'       // Tomato
    }
  };
  
  // Get default colors based on style preset
  const defaultColors = defaultSchemes[params.stylePreset];
  
  // Override with custom colors if provided
  if (params.colorScheme) {
    return {
      primary: params.colorScheme.primary || defaultColors.primary,
      secondary: params.colorScheme.secondary || defaultColors.secondary,
      background: params.colorScheme.background || defaultColors.background,
      text: params.colorScheme.text || defaultColors.text,
      accent: params.colorScheme.accent || defaultColors.accent
    };
  }
  
  return defaultColors;
}

/**
 * Gets font and design elements based on style preset
 */
function getFontAndDesign(stylePreset: string): {
  titleFont: string,
  headerFont: string,
  bodyFont: string,
  buttonFont: string,
  cornerRadius: string,
  borderThickness: number,
  borderColor: string,
  shadowTransparency: number,
  shadowSize: number
} {
  switch (stylePreset) {
    case 'Modern':
      return {
        titleFont: 'Enum.Font.GothamBold',
        headerFont: 'Enum.Font.GothamSemibold',
        bodyFont: 'Enum.Font.Gotham',
        buttonFont: 'Enum.Font.GothamMedium',
        cornerRadius: 'UDim.new(0, 8)',
        borderThickness: 0,
        borderColor: 'Primary',
        shadowTransparency: 0.5,
        shadowSize: 4
      };
      
    case 'Retro':
      return {
        titleFont: 'Enum.Font.Arcade',
        headerFont: 'Enum.Font.Arcade',
        bodyFont: 'Enum.Font.Arcade',
        buttonFont: 'Enum.Font.Arcade',
        cornerRadius: 'UDim.new(0, 0)',
        borderThickness: 2,
        borderColor: 'Secondary',
        shadowTransparency: 0.7,
        shadowSize: 2
      };
      
    case 'Minimalist':
      return {
        titleFont: 'Enum.Font.SourceSansBold',
        headerFont: 'Enum.Font.SourceSansSemibold',
        bodyFont: 'Enum.Font.SourceSans',
        buttonFont: 'Enum.Font.SourceSans',
        cornerRadius: 'UDim.new(0, 2)',
        borderThickness: 0,
        borderColor: 'Primary',
        shadowTransparency: 0.8,
        shadowSize: 1
      };
      
    case 'Fantasy':
      return {
        titleFont: 'Enum.Font.Fondamento',
        headerFont: 'Enum.Font.Fondamento',
        bodyFont: 'Enum.Font.Fondamento',
        buttonFont: 'Enum.Font.Fondamento',
        cornerRadius: 'UDim.new(0, 12)',
        borderThickness: 1,
        borderColor: 'Accent',
        shadowTransparency: 0.4,
        shadowSize: 6
      };
      
    case 'SciFi':
      return {
        titleFont: 'Enum.Font.Code',
        headerFont: 'Enum.Font.Code',
        bodyFont: 'Enum.Font.Code',
        buttonFont: 'Enum.Font.Code',
        cornerRadius: 'UDim.new(0, 4)',
        borderThickness: 1,
        borderColor: 'Primary',
        shadowTransparency: 0.6,
        shadowSize: 3
      };
      
    default: // Custom
      return {
        titleFont: 'Enum.Font.GothamBold',
        headerFont: 'Enum.Font.GothamSemibold',
        bodyFont: 'Enum.Font.Gotham',
        buttonFont: 'Enum.Font.GothamMedium',
        cornerRadius: 'UDim.new(0, 6)',
        borderThickness: 0,
        borderColor: 'Primary',
        shadowTransparency: 0.6,
        shadowSize: 3
      };
  }
}
