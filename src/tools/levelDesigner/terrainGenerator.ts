/**
 * Generates Lua code for terrain creation
 */
export function generateTerrainCode(params) {
  const { terrainType, waterEnabled, size } = params;
  
  return `-- Terrain Generator for ${terrainType} terrain
-- Generated by Roblex Studio MCP Server - Level Designer

local function GenerateTerrain()
    -- Get terrain object
    local terrain = workspace.Terrain
    
    -- Clear existing terrain
    terrain:Clear()
    
    -- Set up terrain settings
    terrain.WaterColor = Color3.fromRGB(12, 84, 92)
    terrain.WaterReflectance = 0.2
    terrain.WaterTransparency = 0.5
    terrain.WaterWaveSize = 0.15
    terrain.WaterWaveSpeed = 10
    
    -- Generate ${terrainType} terrain
    ${generateTerrainTypeCode(terrainType, size, waterEnabled)}
    
    return terrain
end

-- Generate the terrain
local newTerrain = GenerateTerrain()
print("Terrain generation complete")
`;
}

/**
 * Generates code specific to terrain type
 */
function generateTerrainTypeCode(terrainType, size, waterEnabled) {
  switch (terrainType) {
    case 'flat':
      return `
    -- Create flat terrain with a grass surface
    local material = Enum.Material.Grass
    
    -- Create flat base
    for x = 0, ${size.x}, 4 do
        for z = 0, ${size.z}, 4 do
            terrain:FillBlock(CFrame.new(x - ${size.x / 2}, 0, z - ${size.z / 2}), Vector3.new(4, 4, 4), material)
        end
    end
    
    ${waterEnabled ? `
    -- Add water if enabled
    terrain:FillBlock(CFrame.new(0, -2, 0), Vector3.new(${size.x + 50}, 2, ${size.z + 50}), Enum.Material.Water)
    ` : ''}`;
    
    case 'hills':
      return `
    -- Create hilly terrain with varied elevation
    local material = Enum.Material.Grass
    
    -- Create base elevation map using perlin noise
    for x = 0, ${size.x}, 4 do
        for z = 0, ${size.z}, 4 do
            local xCoord = x / ${size.x} * 5
            local zCoord = z / ${size.z} * 5
            
            -- Simple noise function for height
            local height = math.noise(xCoord, zCoord) * 10
            
            terrain:FillBlock(CFrame.new(x - ${size.x / 2}, height, z - ${size.z / 2}), Vector3.new(4, 4 + height, 4), material)
        end
    end
    
    ${waterEnabled ? `
    -- Add water if enabled
    terrain:FillBlock(CFrame.new(0, -2, 0), Vector3.new(${size.x + 50}, 2, ${size.z + 50}), Enum.Material.Water)
    ` : ''}`;
    
    case 'mountains':
      return `
    -- Create mountainous terrain with dramatic elevation changes
    local materials = {
        Enum.Material.Grass,
        Enum.Material.Rock,
        Enum.Material.Snow
    }
    
    -- Create mountain range using multiple noise functions
    for x = 0, ${size.x}, 4 do
        for z = 0, ${size.z}, 4 do
            local xCoord = x / ${size.x} * 3
            local zCoord = z / ${size.z} * 3
            
            -- Combine multiple noise scales for more natural look
            local baseHeight = math.abs(math.noise(xCoord, zCoord)) * 30
            local detailHeight = math.abs(math.noise(xCoord * 2, zCoord * 2)) * 10
            local height = baseHeight + detailHeight
            
            -- Select material based on height
            local material = materials[1]
            if height > 20 then
                material = materials[2]
            end
            if height > 30 then
                material = materials[3]
            end
            
            terrain:FillBlock(CFrame.new(x - ${size.x / 2}, height - 5, z - ${size.z / 2}), Vector3.new(4, 4 + height, 4), material)
        end
    end
    
    ${waterEnabled ? `
    -- Add water if enabled
    terrain:FillBlock(CFrame.new(0, -2, 0), Vector3.new(${size.x + 50}, 2, ${size.z + 50}), Enum.Material.Water)
    ` : ''}`;
    
    case 'islands':
      return `
    -- Create island terrain with water surrounding
    local materials = {
        Enum.Material.Grass,
        Enum.Material.Sand,
        Enum.Material.Rock
    }
    
    -- Generate islands
    local islands = {
        {center = Vector3.new(0, 0, 0), radius = ${size.x * 0.3}, height = 25},
        {center = Vector3.new(${size.x * 0.5}, 0, ${size.z * 0.5}), radius = ${size.x * 0.15}, height = 20},
        {center = Vector3.new(-${size.x * 0.4}, 0, -${size.z * 0.3}), radius = ${size.x * 0.2}, height = 15}
    }
    
    for _, island in ipairs(islands) do
        local center, radius, maxHeight = island.center, island.radius, island.height
        
        for x = center.X - radius, center.X + radius, 4 do
            for z = center.Z - radius, center.Z + radius, 4 do
                local dx, dz = x - center.X, z - center.Z
                local distance = math.sqrt(dx * dx + dz * dz)
                
                if distance <= radius then
                    -- Use distance to determine height - higher toward center
                    local heightFactor = 1 - (distance / radius)
                    local height = maxHeight * heightFactor
                    
                    -- Add some noise to make it look more natural
                    height = height + math.noise(x/30, z/30) * 5
                    
                    -- Select material based on height
                    local material = materials[2] -- Sand by default
                    if height > maxHeight * 0.3 then 
                        material = materials[1] -- Grass for higher areas
                    end
                    if height > maxHeight * 0.8 then
                        material = materials[3] -- Rock for peaks
                    end
                    
                    terrain:FillBlock(CFrame.new(x, height - 5, z), Vector3.new(4, height + 5, 4), material)
                end
            end
        end
    end
    
    -- Add water (for islands, water is usually enabled)
    terrain:FillBlock(CFrame.new(0, 0, 0), Vector3.new(${size.x + 100}, 5, ${size.z + 100}), Enum.Material.Water)
    `;
    
    case 'caves':
      return `
    -- Create cave terrain with underground passages
    local rockMaterial = Enum.Material.Rock
    
    -- Fill the entire area with solid material first
    terrain:FillBlock(CFrame.new(0, 0, 0), Vector3.new(${size.x}, ${size.y}, ${size.z}), rockMaterial)
    
    -- Create cave tunnels
    local tunnels = {
        {start = Vector3.new(-${size.x * 0.4}, ${size.y * 0.5}, -${size.z * 0.4}), 
         finish = Vector3.new(${size.x * 0.4}, ${size.y * 0.3}, ${size.z * 0.4}), 
         radius = 8},
        {start = Vector3.new(${size.x * 0.3}, ${size.y * 0.4}, -${size.z * 0.3}), 
         finish = Vector3.new(-${size.x * 0.2}, ${size.y * 0.4}, ${size.z * 0.2}), 
         radius = 6},
        {start = Vector3.new(0, ${size.y * 0.2}, ${size.z * 0.3}), 
         finish = Vector3.new(0, ${size.y * 0.6}, -${size.z * 0.3}), 
         radius = 7}
    }
    
    for _, tunnel in ipairs(tunnels) do
        local start, finish, radius = tunnel.start, tunnel.finish, tunnel.radius
        local direction = (finish - start).Unit
        local distance = (finish - start).Magnitude
        
        -- Create tunnel by removing material along the path
        for t = 0, distance, 2 do
            local position = start + direction * t
            terrain:FillBall(position, radius, Enum.Material.Air)
        end
    end
    
    -- Add some cave chambers
    local chambers = {
        {center = Vector3.new(0, ${size.y * 0.4}, 0), radius = 20},
        {center = Vector3.new(${size.x * 0.3}, ${size.y * 0.5}, ${size.z * 0.3}), radius = 15},
        {center = Vector3.new(-${size.x * 0.3}, ${size.y * 0.3}, -${size.z * 0.3}), radius = 12}
    }
    
    for _, chamber in ipairs(chambers) do
        terrain:FillBall(chamber.center, chamber.radius, Enum.Material.Air)
    }
    
    ${waterEnabled ? `
    -- Add underground water pools
    terrain:FillBlock(CFrame.new(0, ${size.y * 0.15}, 0), Vector3.new(${size.x * 0.5}, 5, ${size.z * 0.5}), Enum.Material.Water)
    ` : ''}`;
    
    default:
      return `
    -- Create custom terrain
    local material = Enum.Material.Grass
    
    -- Create base terrain
    terrain:FillBlock(CFrame.new(0, 0, 0), Vector3.new(${size.x}, 1, ${size.z}), material)
    
    ${waterEnabled ? `
    -- Add water if enabled
    terrain:FillBlock(CFrame.new(0, -5, 0), Vector3.new(${size.x + 50}, 5, ${size.z + 50}), Enum.Material.Water)
    ` : ''}`;
  }
}

/**
 * Generates a description of the height map for visualization
 */
export function generateHeightMapDescription(params) {
  return `Height map visualization would show a ${params.terrainType} terrain with dimensions ${params.size.x}x${params.size.z}.`;
}

/**
 * Generates setup instructions for terrain
 */
export function generateTerrainInstructions(params) {
  return `
## Terrain Setup Instructions

1. Create a new ServerScript in ServerScriptService
2. Copy the provided terrain code into the script
3. Run the game to generate the terrain
4. The terrain will replace any existing terrain in the workspace
5. You can further edit the terrain using Roblox Studio's terrain tools

### Terrain Settings:
- Type: ${params.terrainType}
- Size: ${params.size.x} x ${params.size.y} x ${params.size.z}
- Water Enabled: ${params.waterEnabled ? 'Yes' : 'No'}
- Detail Level: ${params.detailLevel || 'medium'}
`;
}