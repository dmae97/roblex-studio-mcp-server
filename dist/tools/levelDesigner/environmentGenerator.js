import { parseColor } from './utils.js';
/**
 * Generates code for environment settings
 */
export function generateEnvironmentCode(params) {
    const { lighting, fog, atmosphere, soundscape } = params;
    let code = `-- Environment Settings Generator
-- Generated by Roblex Studio MCP Server - Level Designer

local function SetupEnvironment()
    local lighting = game:GetService("Lighting")
    local soundService = game:GetService("SoundService")
`;
    // Add lighting configuration if provided
    if (lighting) {
        code += `
    -- Configure lighting
    ${lighting.ambient ? `lighting.Ambient = Color3.fromRGB(${parseColor(lighting.ambient)})` : ''}
    ${lighting.brightness !== undefined ? `lighting.Brightness = ${lighting.brightness}` : ''}
    ${lighting.time !== undefined ? `lighting.ClockTime = ${lighting.time}` : ''}
    ${lighting.shadows !== undefined ? `lighting.GlobalShadows = ${lighting.shadows}` : ''}
    
    ${lighting.colorShift?.top ? `lighting.ColorShift_Top = Color3.fromRGB(${parseColor(lighting.colorShift.top)})` : ''}
    ${lighting.colorShift?.bottom ? `lighting.ColorShift_Bottom = Color3.fromRGB(${parseColor(lighting.colorShift.bottom)})` : ''}
`;
    }
    // Add fog configuration if provided
    if (fog) {
        code += `
    -- Configure fog
    ${fog.enabled !== undefined ? `lighting.FogEnabled = ${fog.enabled}` : ''}
    ${fog.start !== undefined ? `lighting.FogStart = ${fog.start}` : ''}
    ${fog.end !== undefined ? `lighting.FogEnd = ${fog.end}` : ''}
    ${fog.color ? `lighting.FogColor = Color3.fromRGB(${parseColor(fog.color)})` : ''}
`;
    }
    // Add atmosphere configuration if provided
    if (atmosphere) {
        code += `
    -- Configure atmosphere
    local atmosphere = lighting:FindFirstChildOfClass("Atmosphere") or Instance.new("Atmosphere", lighting)
    ${atmosphere.density !== undefined ? `atmosphere.Density = ${atmosphere.density}` : ''}
    ${atmosphere.offset !== undefined ? `atmosphere.Offset = ${atmosphere.offset}` : ''}
    ${atmosphere.color ? `atmosphere.Color = Color3.fromRGB(${parseColor(atmosphere.color)})` : ''}
    ${atmosphere.glare !== undefined ? `atmosphere.Glare = ${atmosphere.glare}` : ''}
`;
    }
    // Add soundscape configuration if provided
    if (soundscape && soundscape.length > 0) {
        code += `
    -- Configure soundscape
    local ambientSounds = Instance.new("Folder")
    ambientSounds.Name = "AmbientSounds"
    ambientSounds.Parent = soundService
    
`;
        soundscape.forEach((sound, index) => {
            code += `    local sound${index + 1} = Instance.new("Sound")
    sound${index + 1}.Name = "AmbientSound${index + 1}"
    sound${index + 1}.SoundId = "${sound.soundId}"
    ${sound.looped !== undefined ? `sound${index + 1}.Looped = ${sound.looped}` : 'sound${index + 1}.Looped = true'}
    ${sound.volume !== undefined ? `sound${index + 1}.Volume = ${sound.volume}` : ''}
    sound${index + 1}.Parent = ambientSounds
    sound${index + 1}:Play()
`;
        });
    }
    // Complete the function and add execution
    code += `
end

-- Setup the environment
SetupEnvironment()
print("Environment settings applied")
`;
    return code;
}
//# sourceMappingURL=environmentGenerator.js.map